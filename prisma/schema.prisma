// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  extensions = [postgis(version: "3.3.5")]
}

model City {
  id        String   @id @default(cuid())
  name      String   // Αθήνα
  name_en   String   // Athens
  name_municipality String // Δήμος Αθηναίων
  name_municipality_en String // Municipality of Athens
  logoImage String?
  timezone  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  officialSupport Boolean @default(false)
  isListed Boolean @default(false)
  isPending Boolean @default(false)
  authorityType AuthorityType @default(municipality)
  wikipediaId String?
  geometry Unsupported("geometry")?
  supportsNotifications Boolean @default(false)
  consultationsEnabled Boolean @default(false)

  parties        Party[]
  persons        Person[]
  councilMeetings CouncilMeeting[]
  administrators Administers[]
  administrativeBodies AdministrativeBody[]
  
  // Added relations for notification system
  petitions Petition[]
  notificationPreferences NotificationPreference[]

  roles Role[]

  // City message relation
  message CityMessage?

  // Consultations relation
  consultations Consultation[]
  consultationComments ConsultationComment[]

  @@index([isPending, isListed])
}

enum AuthorityType {
  municipality
  region
}

enum AdministrativeBodyType {
  council      // Συμβούλιο (π.χ. Δημοτικό Συμβούλιο)
  committee    // Επιτροπή (π.χ. Δημοτική Επιτροπή)
  community    // Κοινότητα (π.χ. 5η Δημοτική Κοινότητα)
}

model AdministrativeBody {
  id        String   @id @default(cuid())
  name      String   // e.g. "5η Δημοτική Κοινότητα"
  name_en   String   // e.g. "5th Municipal Community"
  type      AdministrativeBodyType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  city      City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId    String
  meetings  CouncilMeeting[]

  roles Role[]

  @@index([cityId])
}

model Party {
  id        String   @id @default(cuid())
  name      String
  name_en   String
  name_short String
  name_short_en String
  colorHex  String
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // TODO: remove the persons relation -- deprecated
  persons Person[]

  city City @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId String

  roles Role[]

  administrators Administers[]

  @@index([cityId])
}

model Person {
  id        String   @id @default(cuid())
  name  String
  name_en String
  name_short String
  name_short_en String
  image     String?
  
  // TODO: remove the textual roles -- deprecated
  role      String?
  role_en   String?

  roles Role[]

  isAdministrativeRole Boolean @default(false)
  activeFrom DateTime?
  activeTo DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileUrl String?

  speakerTags SpeakerTag[]
  voicePrints VoicePrint[]
  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId String
  party  Party? @relation(fields: [partyId], references: [id], onDelete: SetNull)
  partyId String?

  administrators Administers[]
  subjectsIntroduced Subject[]

  @@index([cityId])
  @@index([partyId])
}

model CouncilMeeting {
  id        String   @default(cuid())
  name      String
  name_en   String
  dateTime  DateTime
  youtubeUrl String?
  agendaUrl String?
  videoUrl String?
  audioUrl String?
  muxPlaybackId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  released  Boolean  @default(false)

  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId String

  administrativeBody AdministrativeBody? @relation(fields: [administrativeBodyId], references: [id], onDelete: SetNull)
  administrativeBodyId String?

  taskStatuses TaskStatus[]
  speakerSegments SpeakerSegment[]
  highlights Highlight[]
  subjects Subject[]
  podcastSpecs PodcastSpec[]

  @@id([cityId, id])
  @@unique([cityId, id])

  @@index([dateTime])
  @@index([released])
  @@index([administrativeBodyId])
}

model TaskStatus {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("pending")
  stage     String?
  percentComplete Float?
  type      String
  requestBody String
  responseBody String?

  version Int?

  councilMeeting   CouncilMeeting @relation(fields: [councilMeetingId, cityId], references: [id, cityId], onDelete: Cascade)
  councilMeetingId String
  cityId            String

  @@index([councilMeetingId, cityId])
}

model VoicePrint {
  id                  String    @id @default(cuid())
  embedding           String    @db.Text
  sourceAudioUrl      String    // URL to the audio source used for the voiceprint
  startTimestamp      Float     // Start time of the extracted audio in the original media
  endTimestamp        Float     // End time of the extracted audio in the original media
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  person              Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId            String
  
  // Reference to the speaker segment used to generate this voiceprint
  sourceSegment       SpeakerSegment @relation(fields: [sourceSegmentId], references: [id], onDelete: Cascade)
  sourceSegmentId     String
  
  @@index([personId])
  @@index([sourceSegmentId])
}

model SpeakerTag {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  label           String?

  person Person? @relation(fields: [personId], references: [id], onDelete: SetNull)
  personId String?

  speakerSegments SpeakerSegment[]

  @@index([personId])
}

model SpeakerSegment {
  id              String   @id @default(cuid())
  startTimestamp  Float
  endTimestamp    Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  meeting   CouncilMeeting @relation(fields: [meetingId, cityId], references: [id, cityId], onDelete: Cascade)
  meetingId String
  cityId String

  speakerTag SpeakerTag @relation(fields: [speakerTagId], references: [id], onDelete: Cascade)
  speakerTagId String

  utterances Utterance[]

  topicLabels TopicLabel[]
  summary Summary?

  subjects SubjectSpeakerSegment[]
  
  usedForVoiceprints VoicePrint[]

  @@index([meetingId, cityId, startTimestamp])
  @@index([speakerTagId])
}

enum SpeakerSegmentType {
  procedural
  substantive
}

model Utterance {
  id              String   @id @default(cuid())
  startTimestamp  Float
  endTimestamp    Float
  text            String
  drift           Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  speakerSegment SpeakerSegment @relation(fields: [speakerSegmentId], references: [id], onDelete: Cascade)
  speakerSegmentId String
  uncertain Boolean @default(false)
  lastModifiedBy LastModifiedBy?

  words Word[]
  highlightedUtterances HighlightedUtterance[]
  podcastPartAudioUtterances PodcastPartAudioUtterance[]
  @@index([speakerSegmentId, startTimestamp])
  utteranceEdits UtteranceEdit[]
}

enum LastModifiedBy {
  user
  task
}

model Word {
  id              String   @id @default(cuid())
  text            String
  startTimestamp  Float
  endTimestamp    Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  confidence      Float    @default(1)

  utterance Utterance @relation(fields: [utteranceId], references: [id], onDelete: Cascade)
  utteranceId String

  @@index([utteranceId, startTimestamp])
}

model TopicLabel {
  id        String   @id  @default(cuid())

  speakerSegment SpeakerSegment @relation(fields: [speakerSegmentId], references: [id], onDelete: Cascade)
  speakerSegmentId String

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([speakerSegmentId, topicId])
}

model Topic {
  id        String   @id  @default(cuid())
  name      String
  name_en   String
  colorHex  String
  icon      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicLabels TopicLabel[]
  subjects Subject[]
  
  // Add relation to notification preferences
  notificationPreferences NotificationPreference[] @relation("NotificationTopic")
}

model Summary {
  id        String   @id  @default(cuid())
  text      String

  speakerSegment SpeakerSegment @relation(fields: [speakerSegmentId], references: [id], onDelete: Cascade)
  speakerSegmentId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  type SpeakerSegmentType?

  @@index([speakerSegmentId])
}

model Subject {
  id        String   @id  @default(cuid())
  name      String
  description String

  cityId String
  councilMeetingId String

  hot Boolean @default(false)
  agendaItemIndex Int?
  nonAgendaReason NonAgendaReason?
  topicId String?
  locationId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personId String?
  introducedBy Person? @relation(fields: [personId], references: [id], onDelete: SetNull)

  councilMeeting CouncilMeeting @relation(fields: [cityId, councilMeetingId], references: [cityId, id], onDelete: Cascade)
  topic Topic? @relation(fields: [topicId], references: [id], onDelete: SetNull)

  location Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  highlights Highlight[]
  speakerSegments SubjectSpeakerSegment[]

  context String?
  contextCitationUrls String[]

  @@index([cityId, councilMeetingId])
}

enum NonAgendaReason {
  beforeAgenda
  outOfAgenda
}

enum LocationType {
  point
  lineString
  polygon
}

model Location {
  id        String   @id  @default(cuid())
  type LocationType
  text String
  coordinates Unsupported("geometry")

  subjects Subject[]
  
  // Relation to notification preferences
  notificationPreferences NotificationPreference[] @relation("NotificationLocation")
}

model SubjectSpeakerSegment {
  id        String   @id  @default(cuid())

  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String
  summary String?

  speakerSegment SpeakerSegment @relation(fields: [speakerSegmentId], references: [id], onDelete: Cascade)
  speakerSegmentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Highlight {
  id        String   @id  @default(cuid())
  name      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meeting   CouncilMeeting @relation(fields: [meetingId, cityId], references: [id, cityId], onDelete: Cascade)
  meetingId String
  cityId String

  highlightedUtterances HighlightedUtterance[]
  
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  subjectId String?

  videoUrl String?
  muxPlaybackId String?

  isShowcased Boolean @default(false)

  @@index([meetingId, cityId])
}

model HighlightedUtterance {
  id        String   @id  @default(cuid())
  
  utterance Utterance @relation(fields: [utteranceId], references: [id], onDelete: Cascade)
  utteranceId String

  highlight Highlight @relation(fields: [highlightId], references: [id], onDelete: Cascade)
  highlightId String

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PodcastSpec {
  id        String   @id  @default(cuid())
  councilMeetingId String
  cityId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meeting   CouncilMeeting @relation(fields: [councilMeetingId, cityId], references: [id, cityId], onDelete: Cascade)
  parts PodcastPart[]
}

enum PodcastPartType {
  HOST
  AUDIO
}

model PodcastPart {
  id        String   @id  @default(cuid())
  type PodcastPartType
  text String?
  audioSegmentUrl String?
  duration Float?
  startTimestamp Float?
  endTimestamp Float?
  index Int

  podcastSpec PodcastSpec @relation(fields: [podcastSpecId], references: [id], onDelete: Cascade)
  podcastSpecId String

  podcastPartAudioUtterances PodcastPartAudioUtterance[]
}

model PodcastPartAudioUtterance {
  id        String   @id  @default(cuid())

  podcastPart PodcastPart @relation(fields: [podcastPartId], references: [id], onDelete: Cascade)
  podcastPartId String

  utterance Utterance @relation(fields: [utteranceId], references: [id], onDelete: Cascade)
  utteranceId String
}

model Offer {
  id        String   @id  @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String   @default("pilot")
  version   Int?     @default(1)

  startDate DateTime
  endDate DateTime

  recipientName String
  platformPrice Float
  ingestionPerHourPrice Float
  hoursToIngest Int
  discountPercentage Float
  meetingsToIngest Int?  // Keep for backward compatibility
  hoursToGuarantee Int?  // New field for version 2
  cityId String?

  correctnessGuarantee Boolean @default(false)
  
  // Equipment rental fields
  equipmentRentalPrice Float?  // Monthly price for equipment rental
  equipmentRentalName String?  // Name/description of equipment
  equipmentRentalDescription String? // Detailed description
  
  // Physical presence fields
  physicalPresenceHours Int?  // Number of hours for physical presence
  
  respondToEmail String
  respondToPhone String
  respondToName String
}

// Users and authentication

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  phone         String?
  onboarded     Boolean         @default(false)
  allowContact  Boolean         @default(false)
  isSuperAdmin  Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  administers   Administers[]
  
  // Add these relations for notification system
  petitions Petition[]
  notificationPreferences NotificationPreference[]
  
  // Add these relations for consultation comments
  consultationComments ConsultationComment[]
  consultationCommentUpvotes ConsultationCommentUpvote[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  utteranceEdits UtteranceEdit[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Administers {
  
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  cityId    String?
  partyId   String?
  personId  String?
  
  city      City?    @relation(fields: [cityId], references: [id], onDelete: Cascade)
  party     Party?   @relation(fields: [partyId], references: [id], onDelete: Cascade)
  person    Person?  @relation(fields: [personId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, cityId, partyId, personId])
}

model UtteranceEdit {
  id        String   @id @default(cuid())
  utterance Utterance @relation(fields: [utteranceId], references: [id], onDelete: Cascade)
  utteranceId String

  beforeText String
  afterText String

  editedBy LastModifiedBy
  userId String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        String   @id @default(cuid())

  personId String
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  cityId String?
  city City? @relation(fields: [cityId], references: [id], onDelete: Cascade)

  partyId String?
  party Party? @relation(fields: [partyId], references: [id], onDelete: Cascade)

  administrativeBodyId String?
  administrativeBody AdministrativeBody? @relation(fields: [administrativeBodyId], references: [id], onDelete: Cascade)

  isHead Boolean @default(false)
  name String?
  name_en String?

  startDate DateTime?
  endDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([personId])
  @@index([cityId])
  @@index([partyId])
  @@index([administrativeBodyId])

  // Only one role per person and {city, party, administrativeBody}
  @@unique([personId, cityId, partyId, administrativeBodyId])
}

// New models for the notification signup system
model Petition {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  city      City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId    String
  
  // Fields from PRD
  is_resident Boolean @default(false)
  is_citizen Boolean @default(false)
  
  @@unique([userId, cityId])
  @@index([userId])
  @@index([cityId])
}

model NotificationPreference {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  city      City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId    String
  
  // Many-to-many relations with locations and topics/interests
  locations Location[] @relation("NotificationLocation")
  interests Topic[]    @relation("NotificationTopic")
  
  @@unique([userId, cityId])
  @@index([userId])
  @@index([cityId])
}

model CityMessage {
  id          String   @id @default(cuid())
  cityId      String   @unique  // One message per city
  emoji       String   // lucide-react icon name
  title       String
  description String
  callToActionText String?
  callToActionUrl  String?
  callToActionExternal Boolean @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  city City @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@index([cityId, isActive])
}

model Consultation {
  id        String   @id @default(cuid())
  name      String
  jsonUrl   String   // URL to the regulation JSON file
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  city      City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId    String

  comments  ConsultationComment[]

  @@index([cityId, isActive])
  @@index([isActive, endDate])
}

enum ConsultationCommentEntityType {
  CHAPTER
  ARTICLE
  GEOSET
  GEOMETRY
}

model ConsultationComment {
  id            String   @id @default(cuid())
  body          String   @db.Text
  entityType    ConsultationCommentEntityType
  entityId      String   // ID of the chapter/article/geoset/geometry being commented on
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  consultation  Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  consultationId String

  city          City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId        String

  upvotes       ConsultationCommentUpvote[]

  @@index([consultationId, entityType, entityId])
  @@index([cityId])
  @@index([userId])
}

model ConsultationCommentUpvote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  comment   ConsultationComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@unique([userId, commentId])
  @@index([commentId])
  @@index([userId])
}
